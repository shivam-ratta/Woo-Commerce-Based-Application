{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/firebase-authentication/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * @name Firebase Authentication\n * @description\n * Cordova plugin for Firebase Authentication\n *\n * @usage\n * ```typescript\n * import { FirebaseAuthentication } from '@ionic-native/firebase-authentication';\n *\n *\n * constructor(private firebaseAuthentication: FirebaseAuthentication) { }\n *\n * ...\n *\n *\n * this.firebaseAuthentication.createUserWithEmailAndPassword('test@gmail.com', '123')\n *   .then((res: any) => console.log(res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'FirebaseAuthentication',\n  plugin: 'cordova-plugin-firebase-authentication',\n  pluginRef: 'cordova.plugins.firebase.auth',\n  repo: 'https://github.com/chemerisuk/cordova-plugin-firebase-authentication',\n  install: 'ionic cordova plugin add cordova-plugin-firebase-authentication --variable FIREBASE_AUTH_VERSION=version',\n  installVariables: ['FIREBASE_AUTH_VERSION'],\n  platforms: ['Android', 'iOS']\n})\n@Injectable()\nexport class FirebaseAuthentication extends IonicNativePlugin {\n  /**\n   * Returns a JWT token used to identify the user to a Firebase service.\n   * @param forceRefresh {boolean} Force Refresh\n   * @return {Promise<any>} Returns the id token\n   */\n  @Cordova({ sync: true })\n  getIdToken(forceRefresh: boolean): Promise<any> {\n    return;\n  }\n\n  /**\n   * Tries to create a new user account with the given email address and password.\n   * @param email Email\n   * @param password Password\n   */\n  @Cordova({ sync: true })\n  createUserWithEmailAndPassword(\n    email: string,\n    password: string\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Initiates email verification for the current user.\n   */\n  @Cordova({ sync: true })\n  sendEmailVerification(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Triggers the Firebase Authentication backend to send a password-reset email to the given email address,\n   * which must correspond to an existing user of your app.\n   * @param email Email\n   */\n  @Cordova({ sync: true })\n  sendPasswordResetEmail(email: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Asynchronously signs in using an email and password.\n   * @param email Email\n   * @param password Password\n   */\n  @Cordova({ sync: true })\n  signInWithEmailAndPassword(email: string, password: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Starts the phone number verification process for the given phone number.\n   * NOTE: Android supports auto-verify and instant device verification.\n   * Therefore in that cases it doesn't make sense to ask for sms code.\n   * It's recommended to register onAuthStateChanged callback to be notified on auto sign-in.\n   * timeout [milliseconds] is the maximum amount of time you are willing to wait for SMS auto-retrieval\n   * to be completed by the library. Maximum allowed value is 2 minutes. Use 0 to disable SMS-auto-retrieval.\n   * If you specify a positive value less than 30 seconds, library will default to 30 seconds.\n   * @param phoneNumber Phone number\n   * @param timeout {number} Timeout\n   */\n  @Cordova({ sync: true })\n  verifyPhoneNumber(phoneNumber: string, timeout: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * Asynchronously signs in using verificationId and 6-digit SMS code.\n   * @param verificationId Verification ID\n   * @param smsCode SMS code\n   */\n  @Cordova({ sync: true })\n  signInWithVerificationId(\n    verificationId: string,\n    smsCode: number\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Create and use temporary anonymous account to authenticate with Firebase.\n   */\n  @Cordova({ sync: true })\n  signInAnonymously(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Uses Google's idToken and accessToken to sign-in into firebase account. In order to retrieve those tokens follow instructions for Android and iOS\n   * @param idToken ID Token\n   * @param accessToken Access Token\n   */\n  @Cordova({ sync: true })\n  signInWithGoogle(idToken: string, accessToken: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Uses Facebook's accessToken to sign-in into firebase account. In order to retrieve those tokens follow instructions for Android and iOS.\n   * @param accessToken Access Token\n   */\n  @Cordova({ sync: true })\n  signInWithFacebook(accessToken: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Uses Twitter's token and secret to sign-in into firebase account. In order to retrieve those tokens follow instructions for Android and iOS.\n   * @param token Token\n   * @param secret Secret\n   */\n  @Cordova({ sync: true })\n  signInWithTwitter(token: string, secret: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Registers a block as an auth state did change listener. To be invoked when:\n   *    - The block is registered as a listener,\n   *    - A user with a different UID from the current user has signed in, or\n   *    - The current user has signed out.\n   */\n  @Cordova({ observable: true, callbackOrder: 'reverse' })\n  onAuthStateChanged(): Observable<any> {\n    return;\n  }\n\n  /**\n   * Set's the current user language code. The string used to set this property must be a language code that follows BCP 47.\n   * @param languageCode Language Code\n   */\n  @Cordova({ sync: true })\n  setLanguageCode(languageCode: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Sets languageCode to the appâ€™s current language.\n   */\n  @Cordova({ sync: true })\n  useAppLanguage(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Signs out the current user and clears it from the disk cache.\n   */\n  @Cordova({ sync: true })\n  signOut(): Promise<any> {\n    return;\n  }\n}\n"]}