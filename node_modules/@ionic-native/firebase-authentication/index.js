var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';
import { Observable } from 'rxjs/Observable';
/**
 * @name Firebase Authentication
 * @description
 * Cordova plugin for Firebase Authentication
 *
 * @usage
 * ```typescript
 * import { FirebaseAuthentication } from '@ionic-native/firebase-authentication';
 *
 *
 * constructor(private firebaseAuthentication: FirebaseAuthentication) { }
 *
 * ...
 *
 *
 * this.firebaseAuthentication.createUserWithEmailAndPassword('test@gmail.com', '123')
 *   .then((res: any) => console.log(res))
 *   .catch((error: any) => console.error(error));
 *
 * ```
 */
var FirebaseAuthentication = (function (_super) {
    __extends(FirebaseAuthentication, _super);
    function FirebaseAuthentication() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns a JWT token used to identify the user to a Firebase service.
     * @param forceRefresh {boolean} Force Refresh
     * @return {Promise<any>} Returns the id token
     */
    /**
       * Returns a JWT token used to identify the user to a Firebase service.
       * @param forceRefresh {boolean} Force Refresh
       * @return {Promise<any>} Returns the id token
       */
    FirebaseAuthentication.prototype.getIdToken = /**
       * Returns a JWT token used to identify the user to a Firebase service.
       * @param forceRefresh {boolean} Force Refresh
       * @return {Promise<any>} Returns the id token
       */
    function (forceRefresh) {
        return;
    };
    /**
     * Tries to create a new user account with the given email address and password.
     * @param email Email
     * @param password Password
     */
    /**
       * Tries to create a new user account with the given email address and password.
       * @param email Email
       * @param password Password
       */
    FirebaseAuthentication.prototype.createUserWithEmailAndPassword = /**
       * Tries to create a new user account with the given email address and password.
       * @param email Email
       * @param password Password
       */
    function (email, password) {
        return;
    };
    /**
     * Initiates email verification for the current user.
     */
    /**
       * Initiates email verification for the current user.
       */
    FirebaseAuthentication.prototype.sendEmailVerification = /**
       * Initiates email verification for the current user.
       */
    function () {
        return;
    };
    /**
     * Triggers the Firebase Authentication backend to send a password-reset email to the given email address,
     * which must correspond to an existing user of your app.
     * @param email Email
     */
    /**
       * Triggers the Firebase Authentication backend to send a password-reset email to the given email address,
       * which must correspond to an existing user of your app.
       * @param email Email
       */
    FirebaseAuthentication.prototype.sendPasswordResetEmail = /**
       * Triggers the Firebase Authentication backend to send a password-reset email to the given email address,
       * which must correspond to an existing user of your app.
       * @param email Email
       */
    function (email) {
        return;
    };
    /**
     * Asynchronously signs in using an email and password.
     * @param email Email
     * @param password Password
     */
    /**
       * Asynchronously signs in using an email and password.
       * @param email Email
       * @param password Password
       */
    FirebaseAuthentication.prototype.signInWithEmailAndPassword = /**
       * Asynchronously signs in using an email and password.
       * @param email Email
       * @param password Password
       */
    function (email, password) {
        return;
    };
    /**
     * Starts the phone number verification process for the given phone number.
     * NOTE: Android supports auto-verify and instant device verification.
     * Therefore in that cases it doesn't make sense to ask for sms code.
     * It's recommended to register onAuthStateChanged callback to be notified on auto sign-in.
     * timeout [milliseconds] is the maximum amount of time you are willing to wait for SMS auto-retrieval
     * to be completed by the library. Maximum allowed value is 2 minutes. Use 0 to disable SMS-auto-retrieval.
     * If you specify a positive value less than 30 seconds, library will default to 30 seconds.
     * @param phoneNumber Phone number
     * @param timeout {number} Timeout
     */
    /**
       * Starts the phone number verification process for the given phone number.
       * NOTE: Android supports auto-verify and instant device verification.
       * Therefore in that cases it doesn't make sense to ask for sms code.
       * It's recommended to register onAuthStateChanged callback to be notified on auto sign-in.
       * timeout [milliseconds] is the maximum amount of time you are willing to wait for SMS auto-retrieval
       * to be completed by the library. Maximum allowed value is 2 minutes. Use 0 to disable SMS-auto-retrieval.
       * If you specify a positive value less than 30 seconds, library will default to 30 seconds.
       * @param phoneNumber Phone number
       * @param timeout {number} Timeout
       */
    FirebaseAuthentication.prototype.verifyPhoneNumber = /**
       * Starts the phone number verification process for the given phone number.
       * NOTE: Android supports auto-verify and instant device verification.
       * Therefore in that cases it doesn't make sense to ask for sms code.
       * It's recommended to register onAuthStateChanged callback to be notified on auto sign-in.
       * timeout [milliseconds] is the maximum amount of time you are willing to wait for SMS auto-retrieval
       * to be completed by the library. Maximum allowed value is 2 minutes. Use 0 to disable SMS-auto-retrieval.
       * If you specify a positive value less than 30 seconds, library will default to 30 seconds.
       * @param phoneNumber Phone number
       * @param timeout {number} Timeout
       */
    function (phoneNumber, timeout) {
        return;
    };
    /**
     * Asynchronously signs in using verificationId and 6-digit SMS code.
     * @param verificationId Verification ID
     * @param smsCode SMS code
     */
    /**
       * Asynchronously signs in using verificationId and 6-digit SMS code.
       * @param verificationId Verification ID
       * @param smsCode SMS code
       */
    FirebaseAuthentication.prototype.signInWithVerificationId = /**
       * Asynchronously signs in using verificationId and 6-digit SMS code.
       * @param verificationId Verification ID
       * @param smsCode SMS code
       */
    function (verificationId, smsCode) {
        return;
    };
    /**
     * Create and use temporary anonymous account to authenticate with Firebase.
     */
    /**
       * Create and use temporary anonymous account to authenticate with Firebase.
       */
    FirebaseAuthentication.prototype.signInAnonymously = /**
       * Create and use temporary anonymous account to authenticate with Firebase.
       */
    function () {
        return;
    };
    /**
     * Uses Google's idToken and accessToken to sign-in into firebase account. In order to retrieve those tokens follow instructions for Android and iOS
     * @param idToken ID Token
     * @param accessToken Access Token
     */
    /**
       * Uses Google's idToken and accessToken to sign-in into firebase account. In order to retrieve those tokens follow instructions for Android and iOS
       * @param idToken ID Token
       * @param accessToken Access Token
       */
    FirebaseAuthentication.prototype.signInWithGoogle = /**
       * Uses Google's idToken and accessToken to sign-in into firebase account. In order to retrieve those tokens follow instructions for Android and iOS
       * @param idToken ID Token
       * @param accessToken Access Token
       */
    function (idToken, accessToken) {
        return;
    };
    /**
     * Uses Facebook's accessToken to sign-in into firebase account. In order to retrieve those tokens follow instructions for Android and iOS.
     * @param accessToken Access Token
     */
    /**
       * Uses Facebook's accessToken to sign-in into firebase account. In order to retrieve those tokens follow instructions for Android and iOS.
       * @param accessToken Access Token
       */
    FirebaseAuthentication.prototype.signInWithFacebook = /**
       * Uses Facebook's accessToken to sign-in into firebase account. In order to retrieve those tokens follow instructions for Android and iOS.
       * @param accessToken Access Token
       */
    function (accessToken) {
        return;
    };
    /**
     * Uses Twitter's token and secret to sign-in into firebase account. In order to retrieve those tokens follow instructions for Android and iOS.
     * @param token Token
     * @param secret Secret
     */
    /**
       * Uses Twitter's token and secret to sign-in into firebase account. In order to retrieve those tokens follow instructions for Android and iOS.
       * @param token Token
       * @param secret Secret
       */
    FirebaseAuthentication.prototype.signInWithTwitter = /**
       * Uses Twitter's token and secret to sign-in into firebase account. In order to retrieve those tokens follow instructions for Android and iOS.
       * @param token Token
       * @param secret Secret
       */
    function (token, secret) {
        return;
    };
    /**
     * Registers a block as an auth state did change listener. To be invoked when:
     *    - The block is registered as a listener,
     *    - A user with a different UID from the current user has signed in, or
     *    - The current user has signed out.
     */
    /**
       * Registers a block as an auth state did change listener. To be invoked when:
       *    - The block is registered as a listener,
       *    - A user with a different UID from the current user has signed in, or
       *    - The current user has signed out.
       */
    FirebaseAuthentication.prototype.onAuthStateChanged = /**
       * Registers a block as an auth state did change listener. To be invoked when:
       *    - The block is registered as a listener,
       *    - A user with a different UID from the current user has signed in, or
       *    - The current user has signed out.
       */
    function () {
        return;
    };
    /**
     * Set's the current user language code. The string used to set this property must be a language code that follows BCP 47.
     * @param languageCode Language Code
     */
    /**
       * Set's the current user language code. The string used to set this property must be a language code that follows BCP 47.
       * @param languageCode Language Code
       */
    FirebaseAuthentication.prototype.setLanguageCode = /**
       * Set's the current user language code. The string used to set this property must be a language code that follows BCP 47.
       * @param languageCode Language Code
       */
    function (languageCode) {
        return;
    };
    /**
     * Sets languageCode to the app’s current language.
     */
    /**
       * Sets languageCode to the app’s current language.
       */
    FirebaseAuthentication.prototype.useAppLanguage = /**
       * Sets languageCode to the app’s current language.
       */
    function () {
        return;
    };
    /**
     * Signs out the current user and clears it from the disk cache.
     */
    /**
       * Signs out the current user and clears it from the disk cache.
       */
    FirebaseAuthentication.prototype.signOut = /**
       * Signs out the current user and clears it from the disk cache.
       */
    function () {
        return;
    };
    FirebaseAuthentication.decorators = [
        { type: Injectable },
    ];
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Boolean]),
        __metadata("design:returntype", Promise)
    ], FirebaseAuthentication.prototype, "getIdToken", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String]),
        __metadata("design:returntype", Promise)
    ], FirebaseAuthentication.prototype, "createUserWithEmailAndPassword", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], FirebaseAuthentication.prototype, "sendEmailVerification", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], FirebaseAuthentication.prototype, "sendPasswordResetEmail", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String]),
        __metadata("design:returntype", Promise)
    ], FirebaseAuthentication.prototype, "signInWithEmailAndPassword", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Number]),
        __metadata("design:returntype", Promise)
    ], FirebaseAuthentication.prototype, "verifyPhoneNumber", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Number]),
        __metadata("design:returntype", Promise)
    ], FirebaseAuthentication.prototype, "signInWithVerificationId", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], FirebaseAuthentication.prototype, "signInAnonymously", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String]),
        __metadata("design:returntype", Promise)
    ], FirebaseAuthentication.prototype, "signInWithGoogle", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], FirebaseAuthentication.prototype, "signInWithFacebook", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String]),
        __metadata("design:returntype", Promise)
    ], FirebaseAuthentication.prototype, "signInWithTwitter", null);
    __decorate([
        Cordova({ observable: true, callbackOrder: 'reverse' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Observable)
    ], FirebaseAuthentication.prototype, "onAuthStateChanged", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], FirebaseAuthentication.prototype, "setLanguageCode", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], FirebaseAuthentication.prototype, "useAppLanguage", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], FirebaseAuthentication.prototype, "signOut", null);
    /**
     * @name Firebase Authentication
     * @description
     * Cordova plugin for Firebase Authentication
     *
     * @usage
     * ```typescript
     * import { FirebaseAuthentication } from '@ionic-native/firebase-authentication';
     *
     *
     * constructor(private firebaseAuthentication: FirebaseAuthentication) { }
     *
     * ...
     *
     *
     * this.firebaseAuthentication.createUserWithEmailAndPassword('test@gmail.com', '123')
     *   .then((res: any) => console.log(res))
     *   .catch((error: any) => console.error(error));
     *
     * ```
     */
    FirebaseAuthentication = __decorate([
        Plugin({
            pluginName: 'FirebaseAuthentication',
            plugin: 'cordova-plugin-firebase-authentication',
            pluginRef: 'cordova.plugins.firebase.auth',
            repo: 'https://github.com/chemerisuk/cordova-plugin-firebase-authentication',
            install: 'ionic cordova plugin add cordova-plugin-firebase-authentication --variable FIREBASE_AUTH_VERSION=version',
            installVariables: ['FIREBASE_AUTH_VERSION'],
            platforms: ['Android', 'iOS']
        })
    ], FirebaseAuthentication);
    return FirebaseAuthentication;
}(IonicNativePlugin));
export { FirebaseAuthentication };
//# sourceMappingURL=index.js.map